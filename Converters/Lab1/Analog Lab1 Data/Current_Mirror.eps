%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 256 131
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%%DocumentFonts:Courier
%******************************************************************************
%
% The preview image should preceed this file if a preview is being generated.
%
% This should be the first line: %!PS-Adobe-2.0 EPSF-1.2
% There should also be a BBox:   %%BoundingBox:0 0 300 300
%
% Cadence Design Systems -- Supports Both Level 1 and Level 2 Printers
%
% EPS Prologue -- Version 97B (aka 9702)
%
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
/gis  {
  0 setgray
  mark
  save
  newpath

  72 resolution div
  dup
  scale

  /stippleArray 10 array def
    stippleArray
     dup    0  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
	        08080404020201018080404020201010> put
	    9  <08081414222241418080414122221414
		08081414222241418080414122221414> put



  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
     /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put

    /BuildChar {
        /char exch def
        /fontdict exch def
	/charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 6 dict def
  xformdict /xformmtrx matrix put

  /rt 0 def
  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet 0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

  gsave

  } def

/cdsLevel2 /languagelevel where {pop languagelevel} {1} ifelse 2 ge def

/cdsColor cdsLevel2 not {
                          false
                          /colorimage where {pop pop true} if
                        } {
	                  true
                        } ifelse
def

/gfs  {
    grestore
    showpage
    restore
    cleartomark
  } def
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def

  } bind def
/rotp  {
  /rt 90 def
  grestore
} def
/clwin  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    rt 90 eq
      {
        pageWidth 0 translate
        rt rotate
	/rt 0 def
	gsave
      } if

    grestore
    gsave
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
    newpath
} def
/bblineto {
  dup dup   /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} def
/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} def
/ellipse
  { ellipsedict begin
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    /savematrix mtrx currentmatrix def
    x y translate
    xrad yrad scale
    0 0 1 startangle endangle arc
    savematrix setmatrix
    end
  } def
/dls  {
  gsave
  newpath
  moveto
  rlineto
  setLineColor
  stroke
  grestore
} def
/dlt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dslt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dlv  {
  rlineto
} def
/dle  {
  stroke
  grestore
} def
/mps {
  newpath
  moveto
} def
/dbu  {
    setLineColor
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } def
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    gsave
      newpath
      x1 y1 bbmoveto
      x2 y1 bblineto
      x2 y2 bblineto
      x1 y2 bblineto
      closepath
      clip fillpath
    grestore
  } def

/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
      newpath
      x1 y1 moveto
      x2 y1 lineto
      x2 y2 lineto
      x1 y2 lineto
      closepath
      gsave
      setFillColor
      fill grestore
      setLineColor stroke

} def
/dpb { gsave
      newpath bbmoveto
} def
/dpu  {
        closepath
        setLineColor
        stroke
      grestore
} def
/dpf  {
       closepath
       clip fillpath
     grestore
} def
/dps  {
       closepath
       setFillColor
       fill grestore
       setLineColor stroke
} def
/dpv  {
    bblineto
} def
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setLineColor
      stroke
    grestore
} def
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def
    gsave
      newpath
      x y radius radius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setFillColor
      fill
    grestore
    setLineColor stroke
  } def
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
      x y xradius yradius 0 360 ellipse
      gsave
      setFillColor
      stroke
    grestore
  } def
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      setFillColor fill
    grestore
    setLineColor stroke
} def
/dau  { gsave
          newpath ellipse
          setLineColor
          stroke
        grestore
} def
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
} def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
} def

/lpon  {
    /oncount exch def
    pop
    oncount
} def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
} def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth setlinewidth
} def

/sls    { pop } def

/ssls  { [] 0 setdash
          1 setlinewidth
} def
/fillpath  {
    setFillColor
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop
    hatchSet 1 eq {setLineColor stroke} if
} def

/fds  { pop /currchar 30 def} def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } def
/fde  {
    pop
  } def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } def

  /setLineColor {
    cdsLevel2 cdsColor or {
      lineRed    1000 div
      lineGreen  1000 div
      lineBlue   1000 div
      setrgbcolor } if
  } def

  /setFillColor {
    cdsLevel2 cdsColor or {
      fillRed    1000 div
      fillGreen  1000 div
      fillBlue   1000 div
      setrgbcolor }
      { 0 setgray } ifelse
  } def

  /slc {
    /lineBlue  exch def
    /lineGreen exch def
    /lineRed   exch def
    /color 1 def
    lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
      /lineBlue  0 def
      /lineGreen 0 def
      /lineRed   0 def
    } if} if} if
  } def

  /sfc {
    /fillBlue  exch def
    /fillGreen exch def
    /fillRed   exch def
    /color 1 def
    fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
      /fillBlue  0 def
      /fillGreen 0 def
      /fillRed   0 def
    } if} if} if
  } def

%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%*****************************
%
% End of Cadence eps.prologue
%
%*****************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
 1039 72000 300 pap
%%Page: cds 1
gis
1 0 1036 544 clwin
0 0 1037 545 clwin
0 0 1037 545 clwin
ssls
0 -10 235 279 dls
235 276 dlt
2 2 dlv
1 1 dlv
2 0 dlv
2 -1 dlv
0 -2 dlv
0 -7 dlv
dle
242 276 dlt
3 2 dlv
1 1 dlv
2 0 dlv
2 -1 dlv
0 -2 dlv
0 -7 dlv
dle
13 0 256 278 dls
13 0 256 273 dls
276 281 dlt
1 1 dlv
3 2 dlv
0 -15 dlv
dle
0 -10 199 256 dls
199 253 dlt
2 3 dlv
2 0 dlv
2 0 dlv
1 0 dlv
1 -3 dlv
0 -7 dlv
dle
217 261 dlt
-2 0 dlv
-1 0 dlv
-1 -3 dlv
0 -12 dlv
dle
5 0 211 256 dls
220 261 dlt
1 0 dlv
1 0 dlv
-1 1 dlv
-1 -1 dlv
dle
0 -10 221 256 dls
0 -10 227 256 dls
227 253 dlt
2 3 dlv
1 0 dlv
3 0 dlv
1 0 dlv
1 -3 dlv
0 -7 dlv
dle
248 256 dlt
0 -11 dlv
0 -2 dlv
-1 -1 dlv
-2 -1 dlv
-2 0 dlv
-1 1 dlv
dle
248 254 dlt
-1 2 dlv
-2 0 dlv
-2 0 dlv
-1 0 dlv
-2 -2 dlv
0 -2 dlv
0 -1 dlv
0 -2 dlv
2 -2 dlv
1 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
dle
13 0 254 255 dls
13 0 254 251 dls
272 258 dlt
1 2 dlv
1 1 dlv
1 0 dlv
3 0 dlv
2 0 dlv
0 -1 dlv
1 -2 dlv
0 -1 dlv
-1 -1 dlv
-1 -3 dlv
-7 -7 dlv
10 0 dlv
dle
187 348 dlt
3 -10 dlv
3 10 dlv
3 -10 dlv
2 10 dlv
dle
13 0 203 347 dls
13 0 203 343 dls
222 350 dlt
0 1 dlv
1 1 dlv
0 1 dlv
2 0 dlv
3 0 dlv
1 0 dlv
1 -1 dlv
1 -1 dlv
0 -2 dlv
-1 -1 dlv
-2 -2 dlv
-7 -8 dlv
10 0 dlv
dle
237 340 dlt
-1 -1 dlv
1 -1 dlv
1 1 dlv
-1 1 dlv
dle
247 353 dlt
-2 0 dlv
-2 -2 dlv
0 -4 dlv
0 -2 dlv
0 -4 dlv
2 -2 dlv
2 -1 dlv
1 0 dlv
3 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 4 dlv
-1 2 dlv
-3 0 dlv
-1 0 dlv
dle
-10 -15 253 353 dls
261 353 dlt
-2 0 dlv
-1 -2 dlv
-1 -4 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 4 dlv
-1 2 dlv
-2 0 dlv
-2 0 dlv
dle
-10 -15 267 353 dls
276 353 dlt
-3 0 dlv
-1 -2 dlv
-1 -4 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
3 -1 dlv
1 0 dlv
2 1 dlv
2 2 dlv
0 4 dlv
0 2 dlv
0 4 dlv
-2 2 dlv
-2 0 dlv
-1 0 dlv
dle
-10 -15 281 353 dls
0 -15 201 310 dls
12 0 207 304 dls
12 0 207 300 dls
227 308 dlt
1 0 dlv
2 2 dlv
0 -15 dlv
dle
238 297 dlt
-1 -1 dlv
1 -1 dlv
1 1 dlv
-1 1 dlv
dle
248 310 dlt
-2 0 dlv
-2 -2 dlv
0 -4 dlv
0 -2 dlv
0 -4 dlv
2 -2 dlv
2 -1 dlv
1 0 dlv
3 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 4 dlv
-1 2 dlv
-3 0 dlv
-1 0 dlv
dle
-10 -15 254 310 dls
262 310 dlt
-2 0 dlv
-1 -2 dlv
-1 -4 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 4 dlv
-1 2 dlv
-2 0 dlv
-2 0 dlv
dle
-10 -15 268 310 dls
277 310 dlt
-3 0 dlv
-1 -2 dlv
-1 -4 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
3 -1 dlv
1 0 dlv
2 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 4 dlv
-1 2 dlv
-2 0 dlv
-1 0 dlv
dle
-10 -15 282 310 dls
0 -10 753 279 dls
753 276 dlt
3 2 dlv
1 1 dlv
2 0 dlv
2 -1 dlv
0 -2 dlv
0 -7 dlv
dle
761 276 dlt
2 2 dlv
2 1 dlv
2 0 dlv
1 -1 dlv
1 -2 dlv
0 -7 dlv
dle
13 0 775 278 dls
13 0 775 273 dls
795 281 dlt
1 1 dlv
2 2 dlv
0 -15 dlv
dle
0 -10 753 256 dls
753 253 dlt
3 3 dlv
1 0 dlv
2 0 dlv
2 0 dlv
0 -3 dlv
0 -7 dlv
dle
771 261 dlt
-1 0 dlv
-2 0 dlv
0 -3 dlv
0 -12 dlv
dle
5 0 765 256 dls
775 261 dlt
1 0 dlv
-1 1 dlv
0 -1 dlv
dle
0 -10 775 256 dls
0 -10 781 256 dls
781 253 dlt
2 3 dlv
2 0 dlv
2 0 dlv
1 0 dlv
1 -3 dlv
0 -7 dlv
dle
803 256 dlt
0 -11 dlv
-1 -2 dlv
-1 -1 dlv
-1 -1 dlv
-2 0 dlv
-2 1 dlv
dle
803 254 dlt
-2 2 dlv
-1 0 dlv
-2 0 dlv
-2 0 dlv
-1 -2 dlv
-1 -2 dlv
0 -1 dlv
1 -2 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
1 1 dlv
2 2 dlv
dle
13 0 808 255 dls
13 0 808 251 dls
827 258 dlt
1 2 dlv
0 1 dlv
2 0 dlv
3 0 dlv
1 0 dlv
1 -1 dlv
0 -2 dlv
0 -1 dlv
0 -1 dlv
-2 -3 dlv
-7 -7 dlv
10 0 dlv
dle
753 348 dlt
3 -10 dlv
2 10 dlv
3 -10 dlv
3 10 dlv
dle
13 0 769 347 dls
13 0 769 343 dls
788 350 dlt
0 1 dlv
0 1 dlv
1 1 dlv
1 0 dlv
3 0 dlv
2 0 dlv
0 -1 dlv
1 -1 dlv
0 -2 dlv
-1 -1 dlv
-1 -2 dlv
-7 -8 dlv
10 0 dlv
dle
803 340 dlt
-1 -1 dlv
1 -1 dlv
0 1 dlv
0 1 dlv
dle
813 353 dlt
-3 0 dlv
-1 -2 dlv
-1 -4 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
3 -1 dlv
1 0 dlv
2 1 dlv
2 2 dlv
0 4 dlv
0 2 dlv
0 4 dlv
-2 2 dlv
-2 0 dlv
-1 0 dlv
dle
-10 -15 818 353 dls
827 353 dlt
-2 0 dlv
-2 -2 dlv
0 -4 dlv
0 -2 dlv
0 -4 dlv
2 -2 dlv
2 -1 dlv
1 0 dlv
2 1 dlv
2 2 dlv
1 4 dlv
0 2 dlv
-1 4 dlv
-2 2 dlv
-2 0 dlv
-1 0 dlv
dle
-10 -15 833 353 dls
841 353 dlt
-2 0 dlv
-1 -2 dlv
-1 -4 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 4 dlv
-1 2 dlv
-2 0 dlv
-2 0 dlv
dle
-10 -15 847 353 dls
0 -15 753 310 dls
13 0 759 304 dls
13 0 759 300 dls
779 308 dlt
1 0 dlv
3 2 dlv
0 -15 dlv
dle
790 297 dlt
0 -1 dlv
0 -1 dlv
1 1 dlv
-1 1 dlv
dle
800 310 dlt
-2 0 dlv
-1 -2 dlv
-1 -4 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 4 dlv
-1 2 dlv
-2 0 dlv
-2 0 dlv
dle
-10 -15 806 310 dls
815 310 dlt
-2 0 dlv
-2 -2 dlv
-1 -4 dlv
0 -2 dlv
1 -4 dlv
2 -2 dlv
2 -1 dlv
1 0 dlv
2 1 dlv
2 2 dlv
0 4 dlv
0 2 dlv
0 4 dlv
-2 2 dlv
-2 0 dlv
-1 0 dlv
dle
-10 -15 820 310 dls
829 310 dlt
-2 0 dlv
-2 -2 dlv
0 -4 dlv
0 -2 dlv
0 -4 dlv
2 -2 dlv
2 -1 dlv
1 0 dlv
3 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 4 dlv
-1 2 dlv
-3 0 dlv
-1 0 dlv
dle
-10 -15 835 310 dls
310 348 dlt
0 19 dlv
7 -19 dlv
7 19 dlv
0 -19 dlv
dle
333 363 dlt
2 1 dlv
3 3 dlv
0 -19 dlv
dle
692 348 dlt
0 19 dlv
7 -19 dlv
8 19 dlv
0 -19 dlv
dle
718 367 dlt
-3 -1 dlv
-1 -3 dlv
-1 -4 dlv
0 -3 dlv
1 -5 dlv
1 -2 dlv
3 -1 dlv
2 0 dlv
3 1 dlv
1 2 dlv
1 5 dlv
0 3 dlv
-1 4 dlv
-1 3 dlv
-3 1 dlv
-2 0 dlv
dle
-12 -19 725 367 dls
4 0 379 289 dls
0 -17 381 289 dls
4 0 379 272 dls
0 -11 387 283 dls
387 280 dlt
3 2 dlv
1 1 dlv
3 0 dlv
1 -1 dlv
1 -2 dlv
0 -8 dlv
dle
305 377 dlt
4 -11 dlv
5 11 dlv
dle
0 -16 328 382 dls
328 374 dlt
-2 2 dlv
-1 1 dlv
-3 0 dlv
-1 -1 dlv
-2 -2 dlv
-1 -2 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
1 0 dlv
3 0 dlv
1 0 dlv
2 2 dlv
dle
0 -16 343 382 dls
343 374 dlt
-2 2 dlv
-1 1 dlv
-3 0 dlv
-1 -1 dlv
-2 -2 dlv
-1 -2 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
1 0 dlv
3 0 dlv
1 0 dlv
2 2 dlv
dle
0 -11 350 382 dls
350 367 dlt
-1 -1 dlv
1 0 dlv
1 0 dlv
-1 1 dlv
dle
3 0 299 270 dls
0 -17 300 270 dls
3 0 299 253 dls
0 -12 307 265 dls
307 261 dlt
2 3 dlv
2 1 dlv
2 0 dlv
2 -1 dlv
1 -3 dlv
0 -8 dlv
dle
3 0 636 289 dls
0 -17 638 289 dls
3 0 636 272 dls
0 -11 644 283 dls
644 280 dlt
2 2 dlv
2 1 dlv
2 0 dlv
2 -1 dlv
1 -2 dlv
0 -8 dlv
dle
683 377 dlt
5 -11 dlv
4 11 dlv
dle
0 -16 706 382 dls
706 374 dlt
-2 2 dlv
-1 1 dlv
-3 0 dlv
-1 -1 dlv
-2 -2 dlv
-1 -2 dlv
0 -2 dlv
1 -2 dlv
2 -2 dlv
1 0 dlv
3 0 dlv
1 0 dlv
2 2 dlv
dle
0 -16 721 382 dls
721 374 dlt
-1 2 dlv
-2 1 dlv
-2 0 dlv
-2 -1 dlv
-1 -2 dlv
-1 -2 dlv
0 -2 dlv
1 -2 dlv
1 -2 dlv
2 0 dlv
2 0 dlv
2 0 dlv
1 2 dlv
dle
0 -11 729 382 dls
729 367 dlt
-1 -1 dlv
1 0 dlv
0 1 dlv
dle
702 270 dlt
-2 -1 dlv
-2 -1 dlv
0 -2 dlv
-1 -2 dlv
0 -4 dlv
1 -3 dlv
0 -1 dlv
2 -2 dlv
2 -1 dlv
3 0 dlv
1 1 dlv
2 2 dlv
1 1 dlv
1 3 dlv
0 4 dlv
-1 2 dlv
-1 2 dlv
-2 1 dlv
-1 1 dlv
-3 0 dlv
dle
715 265 dlt
0 -9 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
2 2 dlv
dle
0 -12 724 265 dls
731 270 dlt
0 -14 dlv
1 -2 dlv
2 -1 dlv
1 0 dlv
dle
5 0 729 265 dls
294 132 dpb
277 116 dpv
277 93 dpv
294 76 dpv
310 93 dpv
310 116 dpv
dpu
743 132 dpb
726 116 dpv
726 93 dpv
743 76 dpv
760 93 dpv
760 116 dpv
dpu
349 325 dlt
1 1 dlv
2 1 dlv
0 -11 dlv
dle
357 320 dlt
6 0 dlv
0 1 dlv
0 1 dlv
-1 1 dlv
-1 1 dlv
-2 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -2 dlv
0 -1 dlv
0 -1 dlv
1 -1 dlv
1 -1 dlv
2 0 dlv
1 1 dlv
1 1 dlv
dle
9 0 367 321 dls
387 324 dlt
0 -2 dlv
-1 -1 dlv
-2 -1 dlv
-1 0 dlv
-1 1 dlv
-1 1 dlv
-1 2 dlv
1 2 dlv
1 1 dlv
1 0 dlv
1 0 dlv
2 0 dlv
1 -1 dlv
0 -2 dlv
0 -3 dlv
0 -3 dlv
-1 -1 dlv
-2 -1 dlv
-1 0 dlv
-2 1 dlv
0 1 dlv
dle
0 -11 344 340 dls
344 339 dlt
1 1 dlv
2 0 dlv
1 0 dlv
1 0 dlv
1 -1 dlv
1 -2 dlv
0 -1 dlv
-1 -2 dlv
-1 -1 dlv
-1 0 dlv
-1 0 dlv
-2 0 dlv
-1 1 dlv
dle
0 -11 355 344 dls
358 340 dlt
3 -7 dlv
3 7 dlv
dle
368 344 dlt
0 -9 dlv
0 -2 dlv
2 0 dlv
1 0 dlv
dle
4 0 366 340 dls
0 -11 374 344 dls
0 -11 378 340 dls
378 339 dlt
1 1 dlv
1 0 dlv
2 0 dlv
1 0 dlv
1 -1 dlv
1 -2 dlv
0 -1 dlv
-1 -2 dlv
-1 -1 dlv
-1 0 dlv
-2 0 dlv
-1 0 dlv
-1 1 dlv
dle
649 325 dlt
1 1 dlv
2 1 dlv
0 -11 dlv
dle
656 320 dlt
7 0 dlv
0 1 dlv
-1 1 dlv
0 1 dlv
-1 1 dlv
-2 0 dlv
-1 -1 dlv
-1 -1 dlv
-1 -2 dlv
0 -1 dlv
1 -1 dlv
1 -1 dlv
1 -1 dlv
2 0 dlv
1 1 dlv
1 1 dlv
dle
9 0 667 321 dls
687 324 dlt
-1 -2 dlv
-1 -1 dlv
-1 -1 dlv
-1 0 dlv
-2 1 dlv
-1 1 dlv
0 2 dlv
0 2 dlv
1 1 dlv
2 0 dlv
1 0 dlv
1 0 dlv
1 -1 dlv
1 -2 dlv
0 -3 dlv
-1 -3 dlv
-1 -1 dlv
-1 -1 dlv
-1 0 dlv
-2 1 dlv
-1 1 dlv
dle
0 -11 652 340 dls
652 339 dlt
1 1 dlv
1 0 dlv
1 0 dlv
1 0 dlv
1 -1 dlv
1 -2 dlv
0 -1 dlv
-1 -2 dlv
-1 -1 dlv
-1 0 dlv
-1 0 dlv
-1 0 dlv
-1 1 dlv
dle
0 -11 662 344 dls
665 340 dlt
3 -7 dlv
3 7 dlv
dle
675 344 dlt
0 -9 dlv
1 -2 dlv
1 0 dlv
1 0 dlv
dle
4 0 673 340 dls
0 -11 681 344 dls
0 -11 685 340 dls
685 339 dlt
1 1 dlv
1 0 dlv
2 0 dlv
1 0 dlv
1 -1 dlv
1 -2 dlv
0 -1 dlv
-1 -2 dlv
-1 -1 dlv
-1 0 dlv
-2 0 dlv
-1 0 dlv
-1 1 dlv
dle
-17 0 361 301 dls
342 301 dpb
340 307 dpv
335 307 dpv
331 301 dpv
333 295 dpv
338 295 dpv
dpu
0 56 331 273 dls
-8 0 320 320 dls
294 245 dlt
0 28 dlv
28 0 dlv
0 56 dlv
-28 0 dlv
0 28 dlv
dle
0 75 518 451 dls
94 0 471 526 dls
16 0 676 301 dls
704 301 dpb
702 307 dpv
696 307 dpv
692 301 dpv
694 295 dpv
700 295 dpv
dpu
0 56 706 273 dls
7 0 717 320 dls
743 245 dlt
0 28 dlv
-28 0 dlv
0 56 dlv
28 0 dlv
0 28 dlv
dle
56 2 320 273 dbu
56 2 715 273 dbu
0 131 200 320 dls
94 0 200 451 dls
94 0 200 320 dls
0 94 294 357 dls
0 75 294 114 dls
0 56 294 189 dls
303 451 dpb
301 458 dpv
294 460 dpv
286 458 dpv
284 451 dpv
286 443 dpv
294 441 dpv
301 443 dpv
dps
303 189 dpb
301 196 dpv
294 198 dpv
286 196 dpv
284 189 dpv
286 181 dpv
294 179 dpv
301 181 dpv
dps
187 0 294 189 dls
113 0 368 301 dls
0 112 481 189 dls
490 301 dpb
488 309 dpv
481 310 dpv
473 309 dpv
471 301 dpv
473 294 dpv
481 292 dpv
488 294 dpv
dps
224 0 294 451 dls
187 0 481 301 dls
225 0 518 451 dls
0 131 743 114 dls
0 94 743 357 dls
752 451 dpb
751 458 dpv
743 460 dpv
736 458 dpv
734 451 dpv
736 443 dpv
743 441 dpv
751 443 dpv
dps
94 0 743 320 dls
94 0 743 451 dls
0 131 837 320 dls
0 4 262 196 dls
18 0 262 198 dls
0 4 280 196 dls
12 0 268 205 dls
272 205 dlt
-3 3 dlv
-1 1 dlv
0 3 dlv
1 2 dlv
3 1 dlv
8 0 dlv
dle
4 0 413 220 dls
0 -18 415 220 dls
4 0 413 202 dls
0 -12 422 214 dls
422 211 dlt
3 2 dlv
2 1 dlv
2 0 dlv
2 -1 dlv
1 -2 dlv
0 -9 dlv
dle
4 0 413 333 dls
0 -19 415 333 dls
4 0 413 314 dls
0 -13 422 327 dls
422 323 dlt
3 3 dlv
2 1 dlv
2 0 dlv
2 -1 dlv
1 -3 dlv
0 -9 dlv
dle
711 172 dlt
1 -1 dlv
2 -2 dlv
2 -1 dlv
2 -1 dlv
5 0 dlv
2 1 dlv
2 1 dlv
2 2 dlv
1 1 dlv
0 4 dlv
-1 2 dlv
-2 1 dlv
-2 1 dlv
-2 1 dlv
-5 0 dlv
-2 -1 dlv
-2 -1 dlv
-2 -1 dlv
-1 -2 dlv
0 -4 dlv
dle
717 187 dlt
9 0 dlv
3 1 dlv
1 2 dlv
0 3 dlv
-1 2 dlv
-3 2 dlv
dle
13 0 717 197 dls
711 205 dlt
15 0 dlv
3 1 dlv
1 2 dlv
0 2 dlv
dle
0 6 717 203 dls
0 4 284 42 dls
19 0 284 44 dls
0 4 303 42 dls
13 0 290 51 dls
294 51 dlt
-3 3 dlv
-1 2 dlv
0 3 dlv
1 1 dlv
3 1 dlv
9 0 dlv
dle
734 26 dlt
1 -2 dlv
1 -1 dlv
2 -1 dlv
3 -1 dlv
4 0 dlv
3 1 dlv
2 1 dlv
1 1 dlv
1 2 dlv
0 4 dlv
-1 2 dlv
-1 1 dlv
-2 1 dlv
-3 1 dlv
-4 0 dlv
-3 -1 dlv
-2 -1 dlv
-1 -1 dlv
-1 -2 dlv
0 -4 dlv
dle
740 41 dlt
9 0 dlv
2 1 dlv
1 2 dlv
0 3 dlv
-1 2 dlv
-2 2 dlv
dle
12 0 740 51 dls
734 59 dlt
15 0 dlv
2 1 dlv
1 2 dlv
0 2 dlv
dle
0 6 740 57 dls
0 -9 310 250 dls
310 246 dlt
-1 1 dlv
-1 0 dlv
-2 0 dlv
-1 -1 dlv
-1 -1 dlv
0 -1 dlv
1 -2 dlv
1 0 dlv
0 -1 dlv
2 0 dlv
1 1 dlv
1 0 dlv
dle
538 497 dlt
4 -9 dlv
4 9 dlv
dle
0 -13 556 501 dls
556 495 dlt
-1 1 dlv
-1 1 dlv
-2 0 dlv
-1 -1 dlv
-2 -1 dlv
0 -2 dlv
0 -1 dlv
0 -2 dlv
2 -1 dlv
1 -1 dlv
2 0 dlv
1 1 dlv
1 1 dlv
dle
0 -13 568 501 dls
568 495 dlt
-1 1 dlv
-1 1 dlv
-2 0 dlv
-1 -1 dlv
-2 -1 dlv
0 -2 dlv
0 -1 dlv
0 -2 dlv
2 -1 dlv
1 -1 dlv
2 0 dlv
1 1 dlv
1 1 dlv
dle
0 -9 729 250 dls
729 246 dlt
-1 1 dlv
-1 0 dlv
-1 0 dlv
-1 0 dlv
-1 -1 dlv
0 -1 dlv
0 -1 dlv
0 -2 dlv
1 0 dlv
1 -1 dlv
1 0 dlv
1 1 dlv
1 0 dlv
dle
294 132 dpb
310 116 dpv
310 93 dpv
294 76 dpv
277 93 dpv
277 116 dpv
dps
361 294 376 309 dbs
312 329 dpb
294 320 dpv
312 310 dpv
dps
286 237 301 252 dbs
286 350 301 365 dbs
511 443 526 458 dbs
743 132 dpb
760 116 dpv
760 93 dpv
743 76 dpv
726 93 dpv
726 116 dpv
dps
661 294 676 309 dbs
724 329 dpb
743 320 dpv
724 310 dpv
dps
736 237 751 252 dbs
736 350 751 365 dbs
0 0 1039 545 clwin
gfs
%%Trailer
%%EOF
