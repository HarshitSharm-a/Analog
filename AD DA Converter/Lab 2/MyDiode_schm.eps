%!PS-Adobe-2.0 EPSF-1.2
%%BoundingBox: 0 0 224 72
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%%DocumentFonts:Courier
%******************************************************************************
%
% The preview image should preceed this file if a preview is being generated.
%
% This should be the first line: %!PS-Adobe-2.0 EPSF-1.2
% There should also be a BBox:   %%BoundingBox:0 0 300 300
%
% Cadence Design Systems -- Supports Both Level 1 and Level 2 Printers
%
% EPS Prologue -- Version 97B (aka 9702)
%
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
/gis  {
  0 setgray
  mark
  save
  newpath

  72 resolution div
  dup
  scale

  /stippleArray 10 array def
    stippleArray
     dup    0  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
	        08080404020201018080404020201010> put
	    9  <08081414222241418080414122221414
		08081414222241418080414122221414> put



  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
     /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put

    /BuildChar {
        /char exch def
        /fontdict exch def
	/charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 6 dict def
  xformdict /xformmtrx matrix put

  /rt 0 def
  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet 0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

  gsave

  } def

/cdsLevel2 /languagelevel where {pop languagelevel} {1} ifelse 2 ge def

/cdsColor cdsLevel2 not {
                          false
                          /colorimage where {pop pop true} if
                        } {
	                  true
                        } ifelse
def

/gfs  {
    grestore
    showpage
    restore
    cleartomark
  } def
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def

  } bind def
/rotp  {
  /rt 90 def
  grestore
} def
/clwin  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    rt 90 eq
      {
        pageWidth 0 translate
        rt rotate
	/rt 0 def
	gsave
      } if

    grestore
    gsave
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
    newpath
} def
/bblineto {
  dup dup   /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} def
/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} def
/ellipse
  { ellipsedict begin
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    /savematrix mtrx currentmatrix def
    x y translate
    xrad yrad scale
    0 0 1 startangle endangle arc
    savematrix setmatrix
    end
  } def
/dls  {
  gsave
  newpath
  moveto
  rlineto
  setLineColor
  stroke
  grestore
} def
/dlt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dslt  {
  newpath
  gsave
  setLineColor
  moveto
} def
/dlv  {
  rlineto
} def
/dle  {
  stroke
  grestore
} def
/mps {
  newpath
  moveto
} def
/dbu  {
    setLineColor
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } def
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    gsave
      newpath
      x1 y1 bbmoveto
      x2 y1 bblineto
      x2 y2 bblineto
      x1 y2 bblineto
      closepath
      clip fillpath
    grestore
  } def

/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
      newpath
      x1 y1 moveto
      x2 y1 lineto
      x2 y2 lineto
      x1 y2 lineto
      closepath
      gsave
      setFillColor
      fill grestore
      setLineColor stroke

} def
/dpb { gsave
      newpath bbmoveto
} def
/dpu  {
        closepath
        setLineColor
        stroke
      grestore
} def
/dpf  {
       closepath
       clip fillpath
     grestore
} def
/dps  {
       closepath
       setFillColor
       fill grestore
       setLineColor stroke
} def
/dpv  {
    bblineto
} def
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setLineColor
      stroke
    grestore
} def
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def
    gsave
      newpath
      x y radius radius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y radius radius 0 360 ellipse
      setFillColor
      fill
    grestore
    setLineColor stroke
  } def
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
      x y xradius yradius 0 360 ellipse
      gsave
      setFillColor
      stroke
    grestore
  } def
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      clip fillpath
    grestore
  } def
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    gsave
      newpath
      x y xradius yradius 0 360 ellipse
      setFillColor fill
    grestore
    setLineColor stroke
} def
/dau  { gsave
          newpath ellipse
          setLineColor
          stroke
        grestore
} def
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
} def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
} def

/lpon  {
    /oncount exch def
    pop
    oncount
} def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
} def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth setlinewidth
} def

/sls    { pop } def

/ssls  { [] 0 setdash
          1 setlinewidth
} def
/fillpath  {
    setFillColor
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop
    hatchSet 1 eq {setLineColor stroke} if
} def

/fds  { pop /currchar 30 def} def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } def
/fde  {
    pop
  } def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } def

  /setLineColor {
    cdsLevel2 cdsColor or {
      lineRed    1000 div
      lineGreen  1000 div
      lineBlue   1000 div
      setrgbcolor } if
  } def

  /setFillColor {
    cdsLevel2 cdsColor or {
      fillRed    1000 div
      fillGreen  1000 div
      fillBlue   1000 div
      setrgbcolor }
      { 0 setgray } ifelse
  } def

  /slc {
    /lineBlue  exch def
    /lineGreen exch def
    /lineRed   exch def
    /color 1 def
    lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
      /lineBlue  0 def
      /lineGreen 0 def
      /lineRed   0 def
    } if} if} if
  } def

  /sfc {
    /fillBlue  exch def
    /fillGreen exch def
    /fillRed   exch def
    /color 1 def
    fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
      /fillBlue  0 def
      /fillGreen 0 def
      /fillRed   0 def
    } if} if} if
  } def

%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%*****************************
%
% End of Cadence eps.prologue
%
%*****************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
 928 72000 300 pap
%%Page: cds 1
gis
0 0 928 295 clwin
0 0 928 295 clwin
0 0 928 295 clwin
ssls
257 225 dlt
5 -10 dlv
4 10 dlv
dle
0 -15 278 230 dls
278 223 dlt
-2 1 dlv
-1 1 dlv
-2 0 dlv
-1 -1 dlv
-2 -1 dlv
-1 -3 dlv
0 -1 dlv
1 -2 dlv
2 -2 dlv
1 0 dlv
2 0 dlv
1 0 dlv
2 2 dlv
dle
291 223 dlt
-1 1 dlv
-1 1 dlv
-3 0 dlv
-1 -1 dlv
-1 -1 dlv
-1 -3 dlv
0 -1 dlv
1 -2 dlv
1 -2 dlv
1 0 dlv
3 0 dlv
1 0 dlv
1 2 dlv
dle
13 0 296 223 dls
13 0 296 219 dls
313 230 dlt
6 -15 dlv
5 15 dlv
dle
0 -15 336 230 dls
336 223 dlt
-2 1 dlv
-1 1 dlv
-2 0 dlv
-2 -1 dlv
-1 -1 dlv
-1 -3 dlv
0 -1 dlv
1 -2 dlv
1 -2 dlv
2 0 dlv
2 0 dlv
1 0 dlv
2 2 dlv
dle
341 230 dlt
0 -1 dlv
1 1 dlv
-1 0 dlv
dle
0 -10 341 225 dls
350 225 dlt
-2 -1 dlv
-1 -1 dlv
-1 -3 dlv
0 -1 dlv
1 -2 dlv
1 -2 dlv
2 0 dlv
2 0 dlv
1 0 dlv
2 2 dlv
1 2 dlv
0 1 dlv
-1 3 dlv
-2 1 dlv
-1 1 dlv
-2 0 dlv
dle
0 -15 368 230 dls
368 223 dlt
-1 1 dlv
-1 1 dlv
-3 0 dlv
-1 -1 dlv
-1 -1 dlv
-1 -3 dlv
0 -1 dlv
1 -2 dlv
1 -2 dlv
1 0 dlv
3 0 dlv
1 0 dlv
1 2 dlv
dle
373 220 dlt
9 0 dlv
0 2 dlv
-1 1 dlv
0 1 dlv
-2 1 dlv
-2 0 dlv
-1 -1 dlv
-2 -1 dlv
-1 -3 dlv
0 -1 dlv
1 -2 dlv
2 -2 dlv
1 0 dlv
2 0 dlv
2 0 dlv
1 2 dlv
dle
475 161 dlt
3 -10 dlv
3 10 dlv
3 -10 dlv
2 10 dlv
dle
13 0 491 160 dls
13 0 491 155 dls
511 163 dlt
2 1 dlv
2 2 dlv
0 -15 dlv
dle
523 152 dlt
-1 0 dlv
1 -1 dlv
0 1 dlv
dle
533 166 dlt
-2 -1 dlv
-2 -2 dlv
-1 -3 dlv
0 -3 dlv
1 -3 dlv
2 -2 dlv
2 -1 dlv
1 0 dlv
2 1 dlv
2 2 dlv
0 3 dlv
0 3 dlv
0 3 dlv
-2 2 dlv
-2 1 dlv
-1 0 dlv
dle
-10 -15 538 166 dls
547 166 dlt
-2 -1 dlv
-2 -2 dlv
0 -3 dlv
0 -3 dlv
0 -3 dlv
2 -2 dlv
2 -1 dlv
1 0 dlv
3 1 dlv
1 2 dlv
1 3 dlv
0 3 dlv
-1 3 dlv
-1 2 dlv
-3 1 dlv
-1 0 dlv
dle
-10 -15 553 166 dls
561 166 dlt
-2 -1 dlv
-1 -2 dlv
-1 -3 dlv
0 -3 dlv
1 -3 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
1 3 dlv
0 3 dlv
-1 3 dlv
-1 2 dlv
-2 1 dlv
-2 0 dlv
dle
-10 -15 567 166 dls
0 -15 448 277 dls
448 275 dlt
1 1 dlv
1 1 dlv
3 0 dlv
1 -1 dlv
1 -1 dlv
1 -3 dlv
0 -1 dlv
-1 -2 dlv
-1 -2 dlv
-1 0 dlv
-3 0 dlv
-1 0 dlv
-1 2 dlv
dle
460 272 dlt
9 0 dlv
0 2 dlv
-1 1 dlv
0 1 dlv
-2 1 dlv
-2 0 dlv
-1 -1 dlv
-2 -1 dlv
-1 -3 dlv
0 -1 dlv
1 -2 dlv
2 -2 dlv
1 0 dlv
2 0 dlv
2 0 dlv
1 2 dlv
dle
0 -10 474 277 dls
474 272 dlt
1 3 dlv
1 1 dlv
2 1 dlv
2 0 dlv
dle
483 282 dlt
0 -1 dlv
1 1 dlv
-1 0 dlv
dle
0 -10 483 277 dls
13 0 489 275 dls
13 0 489 271 dls
517 272 dlt
-10 0 dlv
7 10 dlv
0 -15 dlv
dle
522 268 dlt
0 -1 dlv
1 0 dlv
-1 1 dlv
dle
532 282 dlt
-2 -1 dlv
-1 -2 dlv
-1 -4 dlv
0 -2 dlv
1 -3 dlv
1 -3 dlv
2 0 dlv
2 0 dlv
2 0 dlv
1 3 dlv
1 3 dlv
0 2 dlv
-1 4 dlv
-1 2 dlv
-2 1 dlv
-2 0 dlv
dle
-10 -15 538 282 dls
547 282 dlt
-2 -1 dlv
-2 -2 dlv
-1 -4 dlv
0 -2 dlv
1 -3 dlv
2 -3 dlv
2 0 dlv
1 0 dlv
2 0 dlv
2 3 dlv
0 3 dlv
0 2 dlv
0 4 dlv
-2 2 dlv
-2 1 dlv
-1 0 dlv
dle
-10 -15 552 282 dls
561 282 dlt
-2 -1 dlv
-2 -2 dlv
0 -4 dlv
0 -2 dlv
0 -3 dlv
2 -3 dlv
2 0 dlv
1 0 dlv
3 0 dlv
1 3 dlv
1 3 dlv
0 2 dlv
-1 4 dlv
-1 2 dlv
-3 1 dlv
-1 0 dlv
dle
-10 -15 567 282 dls
0 -10 450 245 dls
450 243 dlt
-2 2 dlv
-1 0 dlv
-2 0 dlv
-2 0 dlv
-1 -2 dlv
-1 -2 dlv
0 -1 dlv
1 -3 dlv
1 -1 dlv
2 -1 dlv
2 0 dlv
1 1 dlv
2 1 dlv
dle
0 -10 456 245 dls
456 241 dlt
0 2 dlv
2 2 dlv
1 0 dlv
2 0 dlv
dle
464 241 dlt
9 0 dlv
0 1 dlv
-1 2 dlv
-1 1 dlv
-1 0 dlv
-2 0 dlv
-2 0 dlv
-1 -2 dlv
-1 -2 dlv
0 -1 dlv
1 -3 dlv
1 -1 dlv
2 -1 dlv
2 0 dlv
1 1 dlv
2 1 dlv
dle
0 -10 486 245 dls
486 243 dlt
-2 2 dlv
-1 0 dlv
-2 0 dlv
-2 0 dlv
-1 -2 dlv
-1 -2 dlv
0 -1 dlv
1 -3 dlv
1 -1 dlv
2 -1 dlv
2 0 dlv
1 1 dlv
2 1 dlv
dle
13 0 491 244 dls
13 0 491 240 dls
511 247 dlt
2 1 dlv
2 2 dlv
0 -15 dlv
dle
523 237 dlt
-1 -1 dlv
1 -1 dlv
0 1 dlv
0 1 dlv
dle
533 250 dlt
-3 -1 dlv
-1 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
3 -1 dlv
1 0 dlv
2 1 dlv
2 2 dlv
0 4 dlv
0 2 dlv
0 3 dlv
-2 2 dlv
-2 1 dlv
-1 0 dlv
dle
-10 -15 538 250 dls
547 250 dlt
-2 -1 dlv
-2 -2 dlv
0 -3 dlv
0 -2 dlv
0 -4 dlv
2 -2 dlv
2 -1 dlv
1 0 dlv
2 1 dlv
2 2 dlv
1 4 dlv
0 2 dlv
-1 3 dlv
-2 2 dlv
-2 1 dlv
-1 0 dlv
dle
-10 -15 553 250 dls
561 250 dlt
-2 -1 dlv
-2 -2 dlv
0 -3 dlv
0 -2 dlv
0 -4 dlv
2 -2 dlv
2 -1 dlv
1 0 dlv
3 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 3 dlv
-1 2 dlv
-3 1 dlv
-1 0 dlv
dle
-10 -15 567 250 dls
0 -10 457 217 dls
457 214 dlt
2 2 dlv
2 1 dlv
2 0 dlv
1 -1 dlv
1 -2 dlv
0 -7 dlv
dle
465 214 dlt
2 2 dlv
1 1 dlv
3 0 dlv
1 -1 dlv
1 -2 dlv
0 -7 dlv
dle
13 0 478 216 dls
13 0 478 211 dls
498 219 dlt
2 1 dlv
2 2 dlv
0 -15 dlv
dle
510 209 dlt
-1 -1 dlv
1 -1 dlv
0 1 dlv
0 1 dlv
dle
520 222 dlt
-2 -1 dlv
-2 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -4 dlv
2 -2 dlv
2 -1 dlv
1 0 dlv
2 1 dlv
2 2 dlv
0 4 dlv
0 2 dlv
0 3 dlv
-2 2 dlv
-2 1 dlv
-1 0 dlv
dle
-10 -15 525 222 dls
534 222 dlt
-2 -1 dlv
-2 -2 dlv
0 -3 dlv
0 -2 dlv
0 -4 dlv
2 -2 dlv
2 -1 dlv
1 0 dlv
3 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 3 dlv
-1 2 dlv
-3 1 dlv
-1 0 dlv
dle
-10 -15 540 222 dls
548 222 dlt
-2 -1 dlv
-1 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 3 dlv
-1 2 dlv
-2 1 dlv
-2 0 dlv
dle
-10 -15 554 222 dls
0 -15 485 194 dls
13 0 491 188 dls
13 0 491 183 dls
511 191 dlt
1 1 dlv
2 2 dlv
0 -15 dlv
dle
522 181 dlt
-1 -1 dlv
1 -1 dlv
1 1 dlv
-1 1 dlv
dle
532 194 dlt
-2 -1 dlv
-1 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 3 dlv
-1 2 dlv
-2 1 dlv
-2 0 dlv
dle
-10 -15 538 194 dls
546 194 dlt
-2 -1 dlv
-1 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 2 dlv
1 4 dlv
0 2 dlv
-1 3 dlv
-1 2 dlv
-2 1 dlv
-2 0 dlv
dle
-10 -15 552 194 dls
561 194 dlt
-3 -1 dlv
-1 -2 dlv
-1 -3 dlv
0 -2 dlv
1 -4 dlv
1 -2 dlv
3 -1 dlv
1 0 dlv
2 1 dlv
2 2 dlv
0 4 dlv
0 2 dlv
0 3 dlv
-2 2 dlv
-2 1 dlv
-1 0 dlv
dle
-10 -15 566 194 dls
238 258 dlt
6 -15 dlv
5 15 dlv
dle
256 258 dlt
-2 -1 dlv
-1 -2 dlv
-1 -4 dlv
0 -2 dlv
1 -3 dlv
1 -3 dlv
2 0 dlv
2 0 dlv
2 0 dlv
1 3 dlv
1 3 dlv
0 2 dlv
-1 4 dlv
-1 2 dlv
-2 1 dlv
-2 0 dlv
dle
-10 -15 262 258 dls
634 194 dlt
0 19 dlv
6 0 dlv
2 -1 dlv
2 -2 dlv
1 -2 dlv
1 -2 dlv
0 -5 dlv
-1 -2 dlv
-1 -2 dlv
-2 -2 dlv
-2 -1 dlv
-6 0 dlv
dle
657 213 dlt
-3 -1 dlv
-2 -3 dlv
-1 -4 dlv
0 -3 dlv
1 -4 dlv
2 -3 dlv
3 -1 dlv
2 0 dlv
2 1 dlv
2 3 dlv
1 4 dlv
0 3 dlv
-1 4 dlv
-2 3 dlv
-2 1 dlv
-2 0 dlv
dle
-13 -19 664 213 dls
614 135 dlt
0 -13 dlv
-1 -2 dlv
-1 -1 dlv
-1 -1 dlv
-3 0 dlv
-1 1 dlv
dle
614 133 dlt
-2 1 dlv
-1 1 dlv
-3 0 dlv
-1 -1 dlv
-2 -1 dlv
-1 -3 dlv
0 -1 dlv
1 -3 dlv
2 -1 dlv
1 -1 dlv
3 0 dlv
1 1 dlv
2 1 dlv
dle
0 -11 620 135 dls
620 132 dlt
3 2 dlv
1 1 dlv
3 0 dlv
1 -1 dlv
1 -2 dlv
0 -8 dlv
dle
0 -17 644 141 dls
644 133 dlt
-1 1 dlv
-2 1 dlv
-2 0 dlv
-2 -1 dlv
-1 -1 dlv
-1 -3 dlv
0 -1 dlv
1 -3 dlv
1 -1 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 1 dlv
dle
0 -11 652 141 dls
652 126 dlt
-1 -1 dlv
1 -1 dlv
0 1 dlv
0 1 dlv
dle
603 287 dlt
6 -17 dlv
7 17 dlv
dle
0 -17 628 287 dls
628 279 dlt
-1 1 dlv
-2 1 dlv
-2 0 dlv
-2 -1 dlv
-1 -1 dlv
-1 -3 dlv
0 -1 dlv
1 -3 dlv
1 -1 dlv
2 -1 dlv
2 0 dlv
2 1 dlv
1 1 dlv
dle
0 -11 663 246 dls
663 241 dlt
-1 1 dlv
-1 1 dlv
-1 0 dlv
-2 -1 dlv
-1 -1 dlv
0 -1 dlv
0 -2 dlv
0 -1 dlv
1 -1 dlv
2 -1 dlv
1 0 dlv
1 1 dlv
1 1 dlv
dle
0 -8 668 243 dls
668 241 dlt
1 1 dlv
1 1 dlv
2 0 dlv
1 -1 dlv
0 -1 dlv
0 -6 dlv
dle
0 -11 678 246 dls
681 243 dlt
3 -8 dlv
3 8 dlv
dle
691 246 dlt
0 -9 dlv
1 -1 dlv
1 -1 dlv
1 0 dlv
dle
4 0 689 243 dls
703 243 dlt
0 -9 dlv
-1 -1 dlv
0 -1 dlv
-1 0 dlv
-2 0 dlv
-1 0 dlv
dle
703 241 dlt
-1 1 dlv
-1 1 dlv
-2 0 dlv
-1 -1 dlv
-1 -1 dlv
-1 -1 dlv
0 -2 dlv
1 -1 dlv
1 -1 dlv
1 -1 dlv
2 0 dlv
1 1 dlv
1 1 dlv
dle
0 -11 707 243 dls
707 241 dlt
1 1 dlv
1 1 dlv
2 0 dlv
1 -1 dlv
1 -1 dlv
1 -1 dlv
0 -2 dlv
-1 -1 dlv
-1 -1 dlv
-1 -1 dlv
-2 0 dlv
-1 1 dlv
-1 1 dlv
dle
0 56 228 18 dls
209 18 dpb
246 18 dpv
228 0 dpv
dpu
0 38 228 149 dls
0 37 228 224 dls
0 11 228 209 dls
11 0 222 196 dls
11 0 222 215 dls
248 205 dpb
245 215 dpv
237 222 dpv
224 224 dpv
215 220 dpv
207 211 dpv
207 200 dpv
215 190 dpv
224 187 dpv
237 188 dpv
245 196 dpv
dpu
0 56 602 18 dls
583 18 dpb
621 18 dpv
602 0 dpv
dpu
638 157 dlt
0 30 dlv
20 -30 dlv
0 30 dlv
dle
0 -44 602 261 dls
0 -20 602 194 dls
0 -17 602 174 dls
-40 0 623 194 dls
621 217 dlt
-38 0 dlv
19 -23 dlv
19 23 dlv
dle
731 74 dlt
0 30 dlv
20 -30 dlv
0 30 dlv
dle
0 56 789 74 dls
0 45 789 179 dls
0 37 789 224 dls
0 21 789 136 dls
0 17 789 119 dls
808 179 dlt
-38 0 dlv
19 -22 dlv
19 22 dlv
dle
40 0 770 157 dls
0 56 789 18 dls
770 18 dpb
808 18 dpv
789 0 dpv
dpu
0 75 228 74 dls
374 0 228 261 dls
0 75 602 74 dls
187 0 602 261 dls
304 293 dlt
8 -18 dlv
7 18 dlv
dle
0 -18 333 293 dls
333 284 dlt
-2 2 dlv
-2 1 dlv
-2 0 dlv
-2 -1 dlv
-2 -2 dlv
-1 -2 dlv
0 -2 dlv
1 -3 dlv
2 -2 dlv
2 0 dlv
2 0 dlv
2 0 dlv
2 2 dlv
dle
256 46 dlt
0 -10 dlv
-1 -2 dlv
0 -1 dlv
-2 0 dlv
-2 0 dlv
-1 0 dlv
dle
256 44 dlt
-1 1 dlv
-2 1 dlv
-2 0 dlv
-1 -1 dlv
-1 -1 dlv
-1 -2 dlv
0 -1 dlv
1 -2 dlv
1 -1 dlv
1 -1 dlv
2 0 dlv
2 1 dlv
1 1 dlv
dle
0 -9 261 46 dls
261 43 dlt
2 2 dlv
1 1 dlv
2 0 dlv
1 -1 dlv
1 -2 dlv
0 -6 dlv
dle
0 -13 280 50 dls
280 44 dlt
-2 1 dlv
-1 1 dlv
-2 0 dlv
-1 -1 dlv
-1 -1 dlv
-1 -2 dlv
0 -1 dlv
1 -2 dlv
1 -1 dlv
1 -1 dlv
2 0 dlv
1 1 dlv
2 1 dlv
dle
630 46 dlt
0 -10 dlv
-1 -2 dlv
0 -1 dlv
-1 0 dlv
-2 0 dlv
-2 0 dlv
dle
630 44 dlt
-1 1 dlv
-1 1 dlv
-2 0 dlv
-2 -1 dlv
-1 -1 dlv
0 -2 dlv
0 -1 dlv
0 -2 dlv
1 -1 dlv
2 -1 dlv
2 0 dlv
1 1 dlv
1 1 dlv
dle
0 -9 635 46 dls
635 43 dlt
2 2 dlv
1 1 dlv
2 0 dlv
1 -1 dlv
1 -2 dlv
0 -6 dlv
dle
0 -13 654 50 dls
654 44 dlt
-2 1 dlv
-1 1 dlv
-2 0 dlv
-1 -1 dlv
-1 -1 dlv
-1 -2 dlv
0 -1 dlv
1 -2 dlv
1 -1 dlv
1 -1 dlv
2 0 dlv
1 1 dlv
2 1 dlv
dle
19 0 758 198 dls
761 198 dlt
-2 1 dlv
-1 2 dlv
0 3 dlv
1 2 dlv
2 1 dlv
3 1 dlv
2 0 dlv
2 -1 dlv
2 -1 dlv
1 -2 dlv
0 -3 dlv
-1 -2 dlv
-2 -1 dlv
dle
13 0 764 127 dls
768 127 dlt
-3 2 dlv
-1 2 dlv
0 3 dlv
1 1 dlv
3 1 dlv
9 0 dlv
dle
817 46 dlt
0 -10 dlv
-1 -2 dlv
0 -1 dlv
-1 0 dlv
-2 0 dlv
-1 0 dlv
dle
817 44 dlt
-1 1 dlv
-1 1 dlv
-2 0 dlv
-1 -1 dlv
-2 -1 dlv
0 -2 dlv
0 -1 dlv
0 -2 dlv
2 -1 dlv
1 -1 dlv
2 0 dlv
1 1 dlv
1 1 dlv
dle
0 -9 822 46 dls
822 43 dlt
2 2 dlv
1 1 dlv
2 0 dlv
1 -1 dlv
1 -2 dlv
0 -6 dlv
dle
0 -13 841 50 dls
841 44 dlt
-1 1 dlv
-2 1 dlv
-2 0 dlv
-1 -1 dlv
-1 -1 dlv
-1 -2 dlv
0 -1 dlv
1 -2 dlv
1 -1 dlv
1 -1 dlv
2 0 dlv
2 1 dlv
1 1 dlv
dle
220 67 235 82 dbs
220 254 235 269 dbs
220 142 235 157 dbs
594 67 609 82 dbs
594 254 609 269 dbs
594 142 609 157 dbs
782 67 797 82 dbs
782 254 797 269 dbs
782 67 797 82 dbs
0 0 928 296 clwin
gfs
%%Trailer
%%EOF
